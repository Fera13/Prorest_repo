# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Prorest11.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import RunningOp
import time
import schedule
import sys
from Database import *
import random
from datetime import date, timedelta
import time
from datetime import datetime
import schedule

d = Database()

class Ui_Prorest(QDialog):
    breakChoice = 1
    musicOrder = 1
    musicRandom = 1
    musicTimer = 1
    music_timer_play = 1
    snackChoice = 1
    important_dates = 1
    quote = 1
    per_quote = 1
    sleep_count = 0
    exercise_count = 0

    def setupUi(self, Prorest):
        """The skeleton of the program"""
        Prorest.setObjectName("Prorest")
        Prorest.resize(1153, 725)
        Prorest.setStyleSheet("color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(151, 45, 219, 252), stop:1 rgba(72, 151, 183, 252));\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(63, 134, 213, 227), stop:0.994737 rgba(194, 255, 135, 252));")
        self.centralwidget = QtWidgets.QWidget(Prorest)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(10, 10, 1131, 691))
        self.tabWidget.setStyleSheet("font: 9pt \"Berlin Sans FB Demi\";\n"
"font-weight: bold;\n"
"color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(111, 39, 186, 241), stop:0.994737 rgba(170, 20, 119, 209));\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(62, 225, 242, 241), stop:0.994737 rgba(255, 237, 0, 209));\n"
"\n"
"")
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Triangular)
        self.tabWidget.setIconSize(QtCore.QSize(16, 16))
        self.tabWidget.setElideMode(QtCore.Qt.ElideNone)
        self.tabWidget.setMovable(True)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.break_bg = QtWidgets.QLabel(self.tab)
        self.break_bg.setGeometry(QtCore.QRect(-10, 0, 1151, 671))
        self.break_bg.setText("")
        self.break_bg.setPixmap(QtGui.QPixmap("../Python/BG/ThinkstockPhotos-489763838-e1490767826261.jpg"))
        self.break_bg.setScaledContents(True)
        self.break_bg.setObjectName("break_bg")
        self.break_btn = QtWidgets.QPushButton(self.tab, clicked = lambda: self.break_press())
        self.break_btn.setGeometry(QtCore.QRect(860, 130, 191, 61))
        self.break_btn.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(151, 241, 51, 241), stop:0.994737 rgba(255, 188, 57, 224));\n"
"font: 75 14pt \"Berlin Sans FB Demi\";")
        self.break_btn.setObjectName("break_btn")
        self.tabWidget.addTab(self.tab, "")
        self.tab_8 = QtWidgets.QWidget()
        self.tab_8.setObjectName("tab_8")
        self.exercise_bg = QtWidgets.QLabel(self.tab_8)
        self.exercise_bg.setGeometry(QtCore.QRect(0, 0, 1161, 671))
        self.exercise_bg.setText("")
        self.exercise_bg.setPixmap(QtGui.QPixmap("../Python/BG/yoga.jpg"))
        self.exercise_bg.setScaledContents(True)
        self.exercise_bg.setObjectName("exercise_bg")
        self.information_label_8 = QtWidgets.QLabel(self.tab_8)
        self.information_label_8.setGeometry(QtCore.QRect(20, 50, 771, 45))
        self.information_label_8.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(81, 28, 141, 255), stop:1 rgba(255, 111, 111, 255));\n"
"font: 75 22pt \"MS Shell Dlg 2\";\n"
"font-weight: bold;\n"
"color: rgb(255, 255, 255);")
        self.information_label_8.setObjectName("information_label_8")
        self.information_label_9 = QtWidgets.QLabel(self.tab_8)
        self.information_label_9.setGeometry(QtCore.QRect(20, 30, 483, 22))
        self.information_label_9.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(81, 28, 141, 255), stop:1 rgba(255, 111, 111, 255));\n"
"font: 11pt \"MS Shell Dlg 2\";\n"
"font-weight: bold;\n"
"color: rgb(255, 255, 255);")
        self.information_label_9.setObjectName("information_label_9")
        self.exercise_btn = QtWidgets.QPushButton(self.tab_8)
        self.exercise_btn.setGeometry(QtCore.QRect(50, 250, 361, 61))
        font = QtGui.QFont()
        font.setFamily("Berlin Sans FB Demi")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.exercise_btn.setFont(font)
        self.exercise_btn.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(81, 28, 141, 255), stop:1 rgba(255, 111, 111, 255));\n"
"font: 75 14pt \"Berlin Sans FB Demi\";\n"
"color: rgb(255, 255, 255);")
        self.exercise_btn.setObjectName("exercise_btn")
        self.exercise_btn.clicked.connect(self.set_exercise_time)
        self.exercise_time = QtWidgets.QLineEdit(self.tab_8)
        self.exercise_time.setGeometry(QtCore.QRect(100, 150, 251, 41))
        self.exercise_time.setStyleSheet("background-color: rgb(255, 193, 255);")
        self.exercise_time.setText("")
        self.exercise_time.setObjectName("exercise_time")
        self.exercise_format = QtWidgets.QLabel(self.tab_8)
        self.exercise_format.setGeometry(QtCore.QRect(90, 200, 271, 31))
        self.exercise_format.setStyleSheet("color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 0, 227), stop:0.994737 rgba(0, 0, 0, 252));\n"
"font: 75 9.7pt \"Berlin Sans FB Demi\";\n"
"font-weight: bold;\n"
"background-color: rgb(200, 151, 182);")
        self.exercise_format.setObjectName("exercise_format")
        self.tabWidget.addTab(self.tab_8, "")        
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.music_bg = QtWidgets.QLabel(self.tab_2)
        self.music_bg.setGeometry(QtCore.QRect(-230, -80, 1361, 761))
        self.music_bg.setText("")
        self.music_bg.setPixmap(QtGui.QPixmap("../Python/BG/maxresdefault2.jpg"))
        self.music_bg.setScaledContents(True)        
        self.music_bg.setObjectName("music_bg")
        self.music_btn = QtWidgets.QPushButton(self.tab_2, clicked = lambda: self.play_music_press())
        self.music_btn.setGeometry(QtCore.QRect(790, 150, 191, 61))
        self.music_btn.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(219, 200, 45, 252), stop:1 rgba(209, 255, 137, 252));\n"
"font: 75 14pt \"Berlin Sans FB Demi\";")
        self.music_btn.setObjectName("music_btn")
        self.Random_music_btn = QtWidgets.QPushButton(self.tab_2, clicked = lambda: self.play_random_music())
        self.Random_music_btn.setGeometry(QtCore.QRect(790, 280, 191, 61))
        self.Random_music_btn.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(219, 200, 45, 252), stop:1 rgba(209, 255, 137, 252));\n"
"font: 75 14pt \"Berlin Sans FB Demi\";")
        self.Random_music_btn.setObjectName("Random_music_btn")
        self.Automated_music_btn = QtWidgets.QPushButton(self.tab_2, clicked = lambda: self.set_music_time_press(self.write_time_bar.text()))
        self.Automated_music_btn.setGeometry(QtCore.QRect(790, 400, 191, 61))
        self.Automated_music_btn.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(219, 200, 45, 252), stop:1 rgba(209, 255, 137, 252));\n"
"font: 75 14pt \"Berlin Sans FB Demi\";")
        self.Automated_music_btn.setObjectName("Automated_music_btn")
        self.label = QtWidgets.QLabel(self.tab_2)
        self.label.setGeometry(QtCore.QRect(750, 60, 261, 31))
        self.label.setStyleSheet("color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 0, 227), stop:0.994737 rgba(0, 0, 0, 252));\n"
"font: 75 9.7pt \"Berlin Sans FB Demi\";\n"
"font-weight: bold;\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(78, 213, 63, 227), stop:0.994737 rgba(194, 255, 135, 252));")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.tab_2)
        self.label_2.setGeometry(QtCore.QRect(730, 90, 311, 31))
        self.label_2.setStyleSheet("color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 0, 227), stop:0.994737 rgba(0, 0, 0, 252));\n"
"font: 75 9.7pt \"Berlin Sans FB Demi\";\n"
"font-weight: bold;\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(78, 213, 63, 227), stop:0.994737 rgba(194, 255, 135, 252));")
        self.label_2.setObjectName("label_2")
        self.write_time_bar = QtWidgets.QLineEdit(self.tab_2)
        self.write_time_bar.setGeometry(QtCore.QRect(810, 480, 151, 31))
        self.write_time_bar.setText("")
        self.write_time_bar.setObjectName("write_time_bar")
        self.time_format_label = QtWidgets.QLabel(self.tab_2)
        self.time_format_label.setGeometry(QtCore.QRect(750, 530, 261, 31))
        self.time_format_label.setStyleSheet("color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 0, 227), stop:0.994737 rgba(0, 0, 0, 252));\n"
"font: 75 9.7pt \"Berlin Sans FB Demi\";\n"
"font-weight: bold;\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(78, 213, 63, 227), stop:0.994737 rgba(194, 255, 135, 252));")
        self.time_format_label.setObjectName("time_format_label")
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.snacks_bg = QtWidgets.QLabel(self.tab_3)
        self.snacks_bg.setGeometry(QtCore.QRect(0, -30, 1131, 751))
        self.snacks_bg.setText("")
        self.snacks_bg.setPixmap(QtGui.QPixmap("../Python/BG/bread-toasted_WDGG60RQAJ.jpg"))
        self.snacks_bg.setScaledContents(True)
        self.snacks_bg.setObjectName("snacks_bg")
        self.snacks_btn = QtWidgets.QPushButton(self.tab_3, clicked = lambda: self.snack_press())
        self.snacks_btn.setGeometry(QtCore.QRect(80, 40, 191, 61))
        self.snacks_btn.setStyleSheet("background-color: qconicalgradient(cx:0.5, cy:0.5, angle:224.494, stop:0 rgba(255, 157, 41, 246), stop:0.994737 rgba(255, 180, 36, 224));\n"
"font: 75 14pt \"Berlin Sans FB Demi\";")
        self.snacks_btn.setObjectName("snacks_btn")
        self.snacks_tips = QtWidgets.QLabel(self.tab_3)
        self.snacks_tips.setGeometry(QtCore.QRect(40, 140, 331, 491))
        self.snacks_tips.setStyleSheet("font: 75 12pt \"Berlin Sans FB Demi\";\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(255, 210, 56, 218), stop:0.994737 rgba(255, 180, 36, 224));")
        self.snacks_tips.setObjectName("snacks_tips")
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.important_bg = QtWidgets.QLabel(self.tab_4)
        self.important_bg.setGeometry(QtCore.QRect(0, -10, 1151, 751))
        self.important_bg.setText("")
        self.important_bg.setPixmap(QtGui.QPixmap("../Python/BG/woman-writing_FFSUL8TZD3.jpg"))
        self.important_bg.setScaledContents(True)        
        self.important_bg.setObjectName("important_bg")
        self.date_label = QtWidgets.QLabel(self.tab_4)
        self.date_label.setGeometry(QtCore.QRect(160, 100, 211, 21))
        self.date_label.setStyleSheet("font: 75 9pt \"Berlin Sans FB Demi\";")
        self.date_label.setObjectName("date_label")
        self.information_label = QtWidgets.QLabel(self.tab_4)
        self.information_label.setGeometry(QtCore.QRect(30, 20, 471, 31))
        self.information_label.setStyleSheet("font: 75 9.7pt \"Berlin Sans FB Demi\";\n"
"font-weight: bold;\n"
"color: rgb(0, 0, 0);")
        self.information_label.setObjectName("information_label")
        self.time_label = QtWidgets.QLabel(self.tab_4)
        self.time_label.setGeometry(QtCore.QRect(160, 190, 211, 21))
        self.time_label.setStyleSheet("font: 75 9.7pt \"Berlin Sans FB Demi\";")
        self.time_label.setObjectName("time_label")
        self.title_label = QtWidgets.QLabel(self.tab_4)
        self.title_label.setGeometry(QtCore.QRect(160, 280, 211, 21))
        self.title_label.setStyleSheet("font: 75 9.7pt \"Berlin Sans FB Demi\";")
        self.title_label.setObjectName("title_label")
        self.msg_label = QtWidgets.QLabel(self.tab_4)
        self.msg_label.setGeometry(QtCore.QRect(160, 370, 211, 21))
        self.msg_label.setStyleSheet("font: 75 9.7pt \"Berlin Sans FB Demi\";")
        self.msg_label.setObjectName("msg_label")
        self.write_date = QtWidgets.QLineEdit(self.tab_4)
        self.write_date.setGeometry(QtCore.QRect(160, 130, 211, 31))
        self.write_date.setText("")
        self.write_date.setObjectName("write_date")
        self.write_time = QtWidgets.QLineEdit(self.tab_4)
        self.write_time.setGeometry(QtCore.QRect(160, 220, 211, 31))
        self.write_time.setText("")
        self.write_time.setObjectName("write_time")
        self.write_title = QtWidgets.QLineEdit(self.tab_4)
        self.write_title.setGeometry(QtCore.QRect(160, 310, 211, 31))
        self.write_title.setText("")
        self.write_title.setObjectName("write_title")
        self.write_message = QtWidgets.QLineEdit(self.tab_4)
        self.write_message.setGeometry(QtCore.QRect(160, 400, 211, 31))
        self.write_message.setText("")
        self.write_message.setObjectName("write_message")
        self.set_date_btn = QtWidgets.QPushButton(self.tab_4, clicked = lambda: self.set_dates_press(self.write_date.text(), self.write_time.text(), self.write_title.text(), self.write_message.text()))
        self.set_date_btn.setGeometry(QtCore.QRect(160, 500, 211, 61))
        font = QtGui.QFont()
        font.setFamily("Berlin Sans FB Demi")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.set_date_btn.setFont(font)
        self.set_date_btn.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(45, 219, 182, 252), stop:1 rgba(209, 255, 137, 252));\n"
"font: 75 14pt \"Berlin Sans FB Demi\";")
        self.set_date_btn.setObjectName("set_date_btn")
        self.information_label_2 = QtWidgets.QLabel(self.tab_4)
        self.information_label_2.setGeometry(QtCore.QRect(50, 50, 431, 31))
        self.information_label_2.setStyleSheet("font: 75 9.7pt \"Berlin Sans FB Demi\";\n"
"font-weight: bold;\n"
"color: rgb(0, 0, 0);")
        self.information_label_2.setObjectName("information_label_2")
        self.time_format_label_2 = QtWidgets.QLabel(self.tab_4)
        self.time_format_label_2.setGeometry(QtCore.QRect(130, 450, 261, 21))
        self.time_format_label_2.setStyleSheet("color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 0, 227), stop:0.994737 rgba(0, 0, 0, 252));\n"
"font: 75 9.7pt \"Berlin Sans FB Demi\";\n"
"font-weight: bold;\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(78, 213, 63, 227), stop:0.994737 rgba(194, 255, 135, 252));")
        self.time_format_label_2.setObjectName("time_format_label_2")
        self.tabWidget.addTab(self.tab_4, "")
        self.tab_7 = QtWidgets.QWidget()
        self.tab_7.setObjectName("tab_7")
        self.sleep_bg = QtWidgets.QLabel(self.tab_7)
        self.sleep_bg.setGeometry(QtCore.QRect(-660, -10, 1801, 751))
        self.sleep_bg.setText("")
        self.sleep_bg.setPixmap(QtGui.QPixmap("../Python/BG/sleep.jpg"))
        self.sleep_bg.setScaledContents(True)
        self.sleep_bg.setObjectName("sleep_bg")
        self.sleep_btn = QtWidgets.QPushButton(self.tab_7)
        self.sleep_btn.setGeometry(QtCore.QRect(710, 480, 361, 61))
        font = QtGui.QFont()
        font.setFamily("Berlin Sans FB Demi")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.sleep_btn.setFont(font)
        self.sleep_btn.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(81, 28, 141, 255), stop:1 rgba(255, 111, 111, 255));\n"
"font: 75 14pt \"Berlin Sans FB Demi\";\n"
"color: rgb(255, 255, 255);")
        self.sleep_btn.setObjectName("sleep_btn")
        self.sleep_btn.clicked.connect(self.set_sleep_reminder)
        self.information_label_3 = QtWidgets.QLabel(self.tab_7)
        self.information_label_3.setGeometry(QtCore.QRect(760, 20, 351, 18))
        self.information_label_3.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(81, 28, 141, 255), stop:1 rgba(255, 111, 111, 255));\n"
"font: 75 9.7pt \"Berlin Sans FB Demi\";\n"
"font-weight: bold;\n"
"color: rgb(255, 255, 255);")
        self.information_label_3.setObjectName("information_label_3")
        self.information_label_4 = QtWidgets.QLabel(self.tab_7)
        self.information_label_4.setGeometry(QtCore.QRect(600, 40, 511, 18))
        self.information_label_4.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(81, 28, 141, 255), stop:1 rgba(255, 111, 111, 255));\n"
"font: 75 9.7pt \"Berlin Sans FB Demi\";\n"
"font-weight: bold;\n"
"color: rgb(255, 255, 255);")
        self.information_label_4.setObjectName("information_label_4")
        self.information_label_5 = QtWidgets.QLabel(self.tab_7)
        self.information_label_5.setGeometry(QtCore.QRect(350, 60, 761, 20))
        self.information_label_5.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(81, 28, 141, 255), stop:1 rgba(255, 111, 111, 255));\n"
"font: 75 9.7pt \"Berlin Sans FB Demi\";\n"
"font-weight: bold;\n"
"color: rgb(255, 255, 255);")
        self.information_label_5.setObjectName("information_label_5")
        self.hours_6 = QtWidgets.QRadioButton(self.tab_7)
        self.hours_6.setGeometry(QtCore.QRect(780, 150, 231, 51))
        self.hours_6.setStyleSheet("font: 75 9.7pt \"Berlin Sans FB Demi\";\n"
"font-weight: bold;\n"
"color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(111, 39, 186, 241), stop:0.994737 rgba(170, 20, 119, 209));\n"
"background-color: rgb(255, 193, 255);")
        self.hours_6.setObjectName("hours_6")
        self.hours_7 = QtWidgets.QRadioButton(self.tab_7)
        self.hours_7.setGeometry(QtCore.QRect(780, 200, 231, 51))
        self.hours_7.setStyleSheet("font: 75 9.7pt \"Berlin Sans FB Demi\";\n"
"font-weight: bold;\n"
"color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(111, 39, 186, 241), stop:0.994737 rgba(170, 20, 119, 209));\n"
"background-color: rgb(255, 193, 255);")
        self.hours_7.setObjectName("hours_7")
        self.hours_8 = QtWidgets.QRadioButton(self.tab_7)
        self.hours_8.setGeometry(QtCore.QRect(780, 250, 231, 61))
        self.hours_8.setStyleSheet("font: 75 9.7pt \"Berlin Sans FB Demi\";\n"
"font-weight: bold;\n"
"color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(111, 39, 186, 241), stop:0.994737 rgba(170, 20, 119, 209));\n"
"background-color: rgb(255, 193, 255);")
        self.hours_8.setObjectName("hours_8")
        self.wake_up_time = QtWidgets.QLineEdit(self.tab_7)
        self.wake_up_time.setGeometry(QtCore.QRect(770, 370, 251, 41))
        self.wake_up_time.setStyleSheet("background-color: rgb(255, 193, 255);")
        self.wake_up_time.setText("")
        self.wake_up_time.setObjectName("wake_up_time")
        self.information_label_6 = QtWidgets.QLabel(self.tab_7)
        self.information_label_6.setGeometry(QtCore.QRect(640, 330, 422, 28))
        self.information_label_6.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(81, 28, 141, 255), stop:1 rgba(255, 111, 111, 255));\n"
"font: 75 14pt \"MS Shell Dlg 2\";\n"
"font-weight: bold;\n"
"color: rgb(255, 255, 255);")
        self.information_label_6.setObjectName("information_label_6")
        self.information_label_7 = QtWidgets.QLabel(self.tab_7)
        self.information_label_7.setGeometry(QtCore.QRect(630, 110, 458, 28))
        self.information_label_7.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(81, 28, 141, 255), stop:1 rgba(255, 111, 111, 255));\n"
"font: 75 14pt \"MS Shell Dlg 2\";\n"
"font-weight: bold;\n"
"color: rgb(255, 255, 255);")
        self.information_label_7.setObjectName("information_label_7")
        self.wake_up_time_format = QtWidgets.QLabel(self.tab_7)
        self.wake_up_time_format.setGeometry(QtCore.QRect(770, 430, 251, 31))
        self.wake_up_time_format.setStyleSheet("color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 0, 227), stop:0.994737 rgba(0, 0, 0, 252));\n"
"font: 75 9.7pt \"Berlin Sans FB Demi\";\n"
"font-weight: bold;\n"
"background-color: rgb(200, 151, 182);")
        self.wake_up_time_format.setObjectName("wake_up_time_format")
        self.tabWidget.addTab(self.tab_7, "")
        self.tab_6 = QtWidgets.QWidget()
        self.tab_6.setObjectName("tab_6")
        self.quote_label = QtWidgets.QLabel(self.tab_6)
        self.quote_label.setGeometry(QtCore.QRect(0, 0, 1161, 751))
        self.quote_label.setText("")
        self.quote_label.setPixmap(QtGui.QPixmap("../Python/BG/funny.jpg"))
        self.quote_label.setScaledContents(True)
        self.quote_label.setObjectName("quote_label")
        self.quote_label_1 = QtWidgets.QLabel(self.tab_6)
        self.quote_label_1.setGeometry(QtCore.QRect(800, 390, 271, 41))
        self.quote_label_1.setStyleSheet("font: 75 10pt \"Berlin Sans FB Demi\";\n"
"color: rgb(0, 0, 0);")
        self.quote_label_1.setObjectName("quote_label_1")
        self.set_quote_btn = QtWidgets.QPushButton(self.tab_6, clicked = lambda: self.set_quotes_press(self.write_quote.text()))
        self.set_quote_btn.setGeometry(QtCore.QRect(750, 540, 351, 61))
        font = QtGui.QFont()
        font.setFamily("Berlin Sans FB Demi")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.set_quote_btn.setFont(font)
        self.set_quote_btn.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(45, 219, 182, 252), stop:1 rgba(209, 255, 137, 252));\n"
"font: 75 14pt \"Berlin Sans FB Demi\";")
        self.set_quote_btn.setObjectName("set_quote_btn")
        self.quote_btn = QtWidgets.QPushButton(self.tab_6, clicked = lambda: self.def_quote_press())
        self.quote_btn.setGeometry(QtCore.QRect(20, 470, 291, 61))
        self.quote_btn.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(45, 219, 182, 252), stop:1 rgba(209, 255, 137, 252));\n"
"font: 75 14pt \"Berlin Sans FB Demi\";")
        self.quote_btn.setObjectName("quote_btn")
        self.write_quote = QtWidgets.QLineEdit(self.tab_6)
        self.write_quote.setGeometry(QtCore.QRect(750, 470, 351, 51))
        self.write_quote.setText("")
        self.write_quote.setObjectName("write_quote")
        self.quote_btn_2 = QtWidgets.QPushButton(self.tab_6, clicked = lambda:self.per_quote_press())
        self.quote_btn_2.setGeometry(QtCore.QRect(20, 550, 291, 61))
        self.quote_btn_2.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(45, 219, 182, 252), stop:1 rgba(209, 255, 137, 252));\n"
"font: 75 14pt \"Berlin Sans FB Demi\";")
        self.quote_btn_2.setObjectName("quote_btn_2")
        self.tabWidget.addTab(self.tab_6, "")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.label_3 = QtWidgets.QLabel(self.tab_5)
        self.label_3.setGeometry(QtCore.QRect(-40, -10, 1171, 751))
        self.label_3.setText("")
        self.label_3.setPixmap(QtGui.QPixmap("../Python/BG/books-library_6XANS2384I.jpg"))
        self.label_3.setScaledContents(True)        
        self.label_3.setObjectName("label_3")
        self.resourse_label = QtWidgets.QLabel(self.tab_5)
        self.resourse_label.setGeometry(QtCore.QRect(40, 130, 1031, 401))
        self.resourse_label.setStyleSheet("font: 12pt \"Imprint MT Shadow\";\n"
"color: rgb(0, 0, 0);\n"
"background-color: qradialgradient(spread:pad, cx:0.5, cy:0.5, radius:0.5, fx:0.88565, fy:0.817449, stop:0 rgba(255, 199, 41, 246), stop:0.994737 rgba(255, 180, 36, 224));\n"
"")
        self.resourse_label.setScaledContents(False)
        self.resourse_label.setWordWrap(True)
        self.resourse_label.setObjectName("resourse_label")
        self.tabWidget.addTab(self.tab_5, "")
        Prorest.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(Prorest)
        self.statusbar.setObjectName("statusbar")
        Prorest.setStatusBar(self.statusbar)
        
        self.retranslateUi(Prorest)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(Prorest)
        self.notify_important_dates()

    def retranslateUi(self, Prorest):
        """Texts on the buttons and labels"""
        _translate = QtCore.QCoreApplication.translate
        Prorest.setWindowTitle(_translate("Prorest", "Prorest"))
        self.break_btn.setToolTip(_translate("Prorest", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Turn on</span></p></body></html>"))
        self.break_btn.setText(_translate("Prorest", "Turn on"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("Prorest", "Break reminder"))
        self.information_label_8.setText(_translate("Prorest", "What time do you plan to exercise today?"))
        self.information_label_9.setText(_translate("Prorest", "Regular exercise is good for a healthy mind and body."))
        self.exercise_btn.setToolTip(_translate("Prorest", "<html><head/><body><p><span style=\" font-size:8pt; font-weight:600;\">Turn on</span></p></body></html>"))
        self.exercise_btn.setText(_translate("Prorest", "Set Exercise Reminder"))
        self.exercise_format.setText(_translate("Prorest", "                  Format (HH:MM)"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_8), _translate("Prorest", "Exercise reminder"))
        self.music_btn.setToolTip(_translate("Prorest", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Turn on</span></p></body></html>"))
        self.music_btn.setText(_translate("Prorest", "Turn on"))
        self.Random_music_btn.setToolTip(_translate("Prorest", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Turn on</span></p></body></html>"))
        self.Random_music_btn.setText(_translate("Prorest", "Randomize on"))
        self.Automated_music_btn.setToolTip(_translate("Prorest", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Turn on</span></p></body></html>"))
        self.Automated_music_btn.setText(_translate("Prorest", "Set music timer"))
        self.label.setText(_translate("Prorest", " Note! When you turn the music off,"))
        self.label_2.setText(_translate("Prorest", "   the current song will need to finish fully."))
        self.time_format_label.setText(_translate("Prorest", "                  Format (HH:MM)"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("Prorest", "Relaxing songs"))
        self.snacks_btn.setToolTip(_translate("Prorest", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Turn on</span></p></body></html>"))
        self.snacks_btn.setText(_translate("Prorest", "Turn on"))
        self.snacks_tips.setText(_translate("Prorest", d.snack_recommendations()))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("Prorest", "Snack/Drink reminder"))
        self.date_label.setText(_translate("Prorest", " Date (Format: YYYY-MM-DD)"))
        self.information_label.setText(_translate("Prorest", "  Add the information with the correct format in the boxes below"))
        self.time_label.setText(_translate("Prorest", "      Time (Format: HH:MM)"))
        self.title_label.setText(_translate("Prorest", "                      Title"))
        self.msg_label.setText(_translate("Prorest", "                   Message"))
        self.set_date_btn.setToolTip(_translate("Prorest", "<html><head/><body><p><span style=\" font-size:8pt; font-weight:600;\">Turn on</span></p></body></html>"))
        self.set_date_btn.setText(_translate("Prorest", "Set Date Reminder"))
        self.information_label_2.setText(_translate("Prorest", "     When you are done, click on the button in the bottom."))
        self.time_format_label_2.setText(_translate("Prorest", "             Is it in a right Format ?"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("Prorest", "Important Dates"))
        self.resourse_label.setText(_translate("Prorest", d.read_references()))
        self.sleep_btn.setToolTip(_translate("Prorest", "<html><head/><body><p><span style=\" font-size:8pt; font-weight:600;\">Turn on</span></p></body></html>"))
        self.sleep_btn.setText(_translate("Prorest", "Set Sleep Reminder"))
        self.information_label_3.setText(_translate("Prorest", "Sleep is an important part of our mental health"))
        self.information_label_4.setText(_translate("Prorest", "It is usually recommended for adults to have about 6 to 8 hours of sleep"))
        self.information_label_5.setText(_translate("Prorest", "We can help you go to bed on time based on when you want to wake up and how long you want to sleep"))
        self.hours_6.setText(_translate("Prorest", "6 Hours"))
        self.hours_7.setText(_translate("Prorest", "7 Hours"))
        self.hours_8.setText(_translate("Prorest", "8 Hours"))
        self.information_label_6.setText(_translate("Prorest", "What time do you want to wake up?"))
        self.information_label_7.setText(_translate("Prorest", "How many hours do you want to sleep?"))
        self.wake_up_time_format.setText(_translate("Prorest", "                  Format (HH:MM)"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_7), _translate("Prorest", "Sleep reminder"))
        self.quote_label_1.setText(_translate("Prorest", "  You can enter your funny quotes"))
        self.set_quote_btn.setToolTip(_translate("Prorest", "<html><head/><body><p><span style=\" font-size:8pt; font-weight:600;\">Turn on</span></p></body></html>"))
        self.set_quote_btn.setText(_translate("Prorest", "Set a Quote"))
        self.quote_btn.setToolTip(_translate("Prorest", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Turn on</span></p></body></html>"))
        self.quote_btn.setText(_translate("Prorest", "Free Quotes : on"))
        self.quote_btn_2.setToolTip(_translate("Prorest", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Turn on</span></p></body></html>"))
        self.quote_btn_2.setText(_translate("Prorest", "Your own Quotes : on"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_6), _translate("Prorest", "Fun Messages"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_5), _translate("Prorest", "Resources"))

    def break_press(self):
        """Check if the requirments are met and start or stop the break notifications"""
        if self.breakChoice == 1:
            self.break_btn.setText("Turn off")
            self.breakChoice = 2
            WorkerThread.running = True
            self.worker = WorkerThread(1)
            self.worker.start()
        else:
            WorkerThread.running = False
            self.break_btn.setText("Turn on")
            self.breakChoice = 1

    def set_sleep_reminder(self):
        """Set a time for sleeping to Database and send notifications"""
        notify = RunningOp
        if self.sleep_count == 1:
            schedule.clear('sleep')
            self.sleep_count -= 1
        if self.hours_6.isChecked or self.hours_7.isChecked or self.hours_8.isChecked:
            if self.hours_6.isChecked():
                sleep_hours = 6
            if self.hours_7.isChecked():
                sleep_hours = 7
            if self.hours_8.isChecked():
                sleep_hours = 8
            try:
                wake_up_input = self.wake_up_time.text()
                wake_up_time2 = datetime.strptime(wake_up_input, '%H:%M') 
                self.sleep_btn.setText("Set New Sleep Time")

                d.write_wake_up(wake_up_input)
                wake_up_time3 = d.read_wake_up_time()

                bed_time = notify.calculate_time_difference(wake_up_time2, sleep_hours)
                sleep_reminder_time = notify.calculate_time_difference(bed_time, 1)

                notify.viewNotification("Sleep Reminder","Reminder set. We recommend sleeping at " + bed_time.strftime("%H:%M") + ".", "Icons/dream.ico",10,5)
                schedule.every().day.at(sleep_reminder_time.strftime("%H:%M")).do(notify.viewNotification, "Sleep Reminder","It's 1 hour before bed. Get off the computer!", "Icons/dream.ico",10,5).tag('sleep')
                self.sleep_count += 1
                self.worker = WorkerThread(10)
                self.worker.start()
            except Exception:
                notify.viewNotification("Sleep Reminder","An error has occured. Please enter valid input", "Icons/error.ico",10,5)
        
        else:
            notify.viewNotification("Sleep Reminder","An error has occured. Please enter valid input", "Icons/error.ico",10,5)
        


    def set_exercise_time(self):
        """Set a time for daily exercise """
        notify = RunningOp
        if self.exercise_count == 1:
                    self.exercise_count -= 1
                    schedule.clear('exercise')
        try:
                wake_up_input = self.exercise_time.text()
                wake_up_time2 = datetime.strptime(wake_up_input, '%H:%M')
                notify.viewNotification("Exercise","Your exercise reminder has been set.","Icons/gym.ico",10,5)
                schedule.every().day.at(wake_up_time2.strftime("%H:%M")).do(notify.viewNotification, "Exercise","It's time to exercise. Get off your behind!","Icons/gym.ico",10,5).tag('exercise')
                self.exercise_count += 1
                self.worker = WorkerThread(11)
                self.worker.start()
        except Exception:
                notify.viewNotification("Exercise","An error has occured. Please enter valid input","Icons/error.ico",10,5)
        

    def play_music_press(self):
        """Check if the requirments are met and start or stop playing music in order"""
        if self.musicOrder == 1:
            self.music_btn.setText("Turn off")
            self.musicOrder = 2
            WorkerThread.music = True
            self.worker = WorkerThread(2)
            self.worker.start()
        else:
            WorkerThread.music = False
            self.music_btn.setText("Turn on")
            self.musicOrder = 1

    def play_random_music(self):
        """Check if the requirments are met and start or stop playing music in a random order"""
        if self.musicRandom == 1:
            self.Random_music_btn.setText("Randomize off")
            self.musicRandom = 2
            WorkerThread.randMusic = True
            self.worker = WorkerThread(3)
            self.worker.start()
        else:
            WorkerThread.randMusic = False
            self.Random_music_btn.setText("Randomize on")
            self.musicRandom = 1

    def set_music_time_press(self, timeSelected):
        """Take the time selected. Check if the requirments are met and start or stop checking current time to play music automatically"""
        timeCheck = RunningOp.checkTimeFormat(timeSelected)
        if timeCheck:
            if self.musicTimer == 1:
                self.Automated_music_btn.setText("Stop timer/ music")
                self.time_format_label.setText("           Time has been set")
                self.musicTimer = 2
                WorkerThread.sTimer = True
                WorkerThread.keepGoing = True
                WorkerThread.timeChosen = timeSelected
                self.worker = WorkerThread(4)
                self.worker.start()
            else:
                self.Automated_music_btn.setText("Set music timer")
                self.time_format_label.setText("              Format (HH:MM)")
                self.write_time_bar.setText("")
                self.musicTimer = 1
                WorkerThread.sTimer = False
                WorkerThread.keepGoing = False
                WorkerThread.songTimer = False
        else:
            self.time_format_label.setText("Please use the right format (HH:MM)")
            self.write_time_bar.setText("")

    def timer_song_play(self):
        """Start the music automatically when the time selected matches the current time"""
        WorkerThread.songTimer = True
        self.music_timer_play = 2
        self.worker = WorkerThread(5)
        self.worker.start()

    def snack_recommend(self, text):
        """Applies the text to the label"""
        self.snacks_tips.setText(text)

    def snack_press(self):
        """Check if the requirments are met and start or stop the snack notifications"""
        if self.snackChoice == 1:
            self.snacks_btn.setText("Turn off")
            self.snackChoice = 2
            WorkerThread.snack = True
            self.worker = WorkerThread(6)
            self.worker.start()
        else:
            WorkerThread.snack = False
            self.snacks_btn.setText("Turn on")
            self.snackChoice = 1

    def set_dates_press(self, date, time, title, msg):
        """Set an important date """
        d = Database()
        dateCheck = RunningOp.check_date_format(date)
        timeCheck = RunningOp.checkTimeFormat(time)
        if dateCheck & timeCheck:
                d.write_important(date, time, title, msg)
                self.time_format_label_2.setText("           Is it in a right Format ?")
                self.write_date.setText("")
                self.write_time.setText("")
                self.write_title.setText("")
                self.write_message.setText("")
        else: 
            self.time_format_label_2.setText("      Check date and time format !")

    def notify_important_dates(self):
        tomorrow_dates = d.check_important_dates()
        if tomorrow_dates == []:
            WorkerThread.date = False
        else:
            WorkerThread.date = True
            self.worker = WorkerThread(7)
            self.worker.start()

    def set_quotes_press(self, quote):
        """Set a quote in database"""
        d = Database()
        d.write_per_quote(quote)
        self.write_quote.setText("")

    def def_quote_press(self):
        """Start or stop the default quotes' notifications"""
        if self.quote == 1:
            self.quote_btn.setText("Free Quotes : off")
            self.quote = 2
            WorkerThread.quote = True
            self.worker = WorkerThread(8)
            self.worker.start()
        else:
            WorkerThread.quote = False
            self.quote_btn.setText("Free Quotes : on")
            self.quote = 1

    def per_quote_press(self):
        """Start or stop the personal quotes' notifications"""
        if self.per_quote == 1:
            self.quote_btn_2.setText("Your own Quotes : off")
            self.per_quote = 2
            WorkerThread.per_quote = True
            self.worker = WorkerThread(9)
            self.worker.start()
        else:
            WorkerThread.per_quote = False
            self.quote_btn_2.setText("Your own Quotes : on")
            self.per_quote = 1


class WorkerThread(QThread):
    running = True
    music = True
    randMusic = True
    songTimer = True
    keepGoing = True
    sTimer = True
    timeChosen = ""
    snack = True
    date = True
    sleep_timer = True
    quote = True
    per_quote = True
    list_of_nrs = [300, 600, 1200, 1450, 1800, 3000, 3300]

    def __init__(self, workerNum):
        super().__init__()
        self.workerNum = workerNum

    def run(self):
        """Starts running different workers depending on the conditions and can be activated together or separatly"""
        if self.workerNum == 1:
            while self.running:
                RunningOp.viewNotification("It's time for a small break!", "Why don't you stretch a bit, move your body and rest your eyes :)", "Icons/Meh.ico", 50, 1800)
        
        elif self.workerNum == 2:
            d = Database()
            songs = d.play_songs_order()
            for song in songs:
                while self.music:
                    RunningOp.play_music(song)
                    break

        elif self.workerNum == 3:
            d = Database()
            songs = d.play_songs_order()
            while len(songs) > 0:
                while self.randMusic:
                    randsong = random.randint(0, len(songs)-1)
                    RunningOp.play_music(songs[randsong])
                    songs.pop(randsong)

        elif self.workerNum == 4:
            while self.sTimer:
                u = Ui_Prorest()
                schedule.every().day.at(self.timeChosen).do(u.timer_song_play)
                while self.keepGoing:
                    schedule.run_pending()
                    time.sleep(1)

        elif self.workerNum == 5:
            d = Database()
            songs = d.play_songs_order()
            while len(songs) > 0:
                while self.songTimer:
                    randsong = random.randint(0, len(songs)-1)
                    RunningOp.play_music(songs[randsong])
                    songs.pop(randsong)

        elif self.workerNum == 6:
            while self.snack:
                RunningOp.viewNotification("It's time for some snacks and refreshments!", "Why don't you grab yourself a snack and some water? Give yourself some much needed energy :)", "Icons/1.ico", 60, 7200)

        elif self.workerNum == 7:
            d = Database()
            RunningOp.viewDateNotification(d.read_important(date.today() + timedelta(days = 1)), "Icons/2.ico", 60)

        elif self.workerNum == 8:
            d = Database()
            while self.quote:
                rand_time_0 = random.choice(self.list_of_nrs)
                RunningOp.viewQuoteNotification(d.read_def_quotes(), "Icons/3.ico", 30, rand_time_0)

        elif self.workerNum == 9:
            d = Database()
            while self.per_quote:
                rand_time = random.choice(self.list_of_nrs)
                RunningOp.viewQuoteNotification(d.read_per_quotes(), "Icons/3.ico", 30, rand_time)
        
        elif self.workerNum == 10:
            while True:
                schedule.run_pending()
                if not schedule.jobs:
                    break
                time.sleep(1)
            schedule.clear('sleep')

        elif self.workerNum == 11:
            while True:
                schedule.run_pending()
                if not schedule.jobs:
                    break
                time.sleep(1)
            schedule.clear('exercise')


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Prorest = QtWidgets.QMainWindow()
    ui = Ui_Prorest()
    ui.setupUi(Prorest)
    Prorest.show()
    sys.exit(app.exec_())
